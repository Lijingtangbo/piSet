#!/bin/bash

##----INTRO-----------##
# Name=BB_rnaseq_pipeline
VERSION=1.20
# Date=Apr20 ,2016
# Update=Jan 15, 2017
# Update information:
# Update=Oct 27, 2017
# Update information: 1. add CPU for htseq; 2. use BB_bamtobw to make bigWig files for visualizing. 3. add a choice for repbase mapping.

########################
# Purpose
#This file is for doing some pre-analysis for each RNA-seq samples
#1.Mapping: bowtie2 + STAR
#2.Count Feature Signal: htseq-count
#3.Plot Results: to do

#######--Arguments--#######
help_info(){
echo -e "\033[32;1m"
cat << EOF
Author: Tianxiong (Bear) Yu
usage:
piSet_rnaseq <option>* (-l input_left.fq) (-g genome) [-r input_right.fq]"
EOF
echo -e "\033[33;1m"
cat << EOF

Options:

    Input:
	-l left RNA-seq fastq file. You can input multiple sample like -l "left1.fq left2.fq left3.fq"
	-r right RNA-seq fastq file. [ not set for single-end ]
		tips for multiple sample mode: if all data is single-end, use like -l "left1.fq left2.fq" without -r; if all data is paired-end data, use like -l "left1.fq left2.fq" -r "right1.fq right2.fq"; if some sample is single-end and other is paired-end, then use like -l "left1.fq left2.fq left3.fq" -r "right1.fq none right3.fq", which none indicates signle-end data.
	-g genome used for this pipeline. eg: hg38 or mm10
	-t sample information file, please use -t with multiple sample mode. sample information is a tab delimited file like format below:
		# sample_prefix_name	condition
		Bill.RNAseq.gen.Thoc7_Df.ovary.r1 Thoc7_DF
		Bill.RNAseq.gen.Thoc7_Df.ovary.r2 Thoc7_DF
		Bill.RNAseq.gen.wt.r1 Wild_type
		Bill.RNAseq.gen.wt.r2 Wild_type
		# in this file, Bill.RNAseq.gen.Thoc7_Df.ovary.r1 Bill.RNAseq.gen.Thoc7_Df.ovary.r2 will be recognized as two replicates in Thoc7_DF condition.
    Output:
	-o output directory. --default: ./
	-p PREFIX for each sample. if you want to set -p in multiple sample mode, plesae use like -p "prefix1 prefix2 prefix3" and keep coordinate with sample_prefix_name in sample information file. --default: sample name
    DEseq2:
	--no-deseq2 do not apply DEseq2 in multiple sample mode. Useful if you are not sure which replicates is good enough for differential expression analysis. default: applied in multiple sample mode
    rRNA removing:
	--no-rRNA-removing do not remove rRNA. default: remove rRNA
	--index-rRNA bowtie2 index for removing rRNA.
    mapping:
	--index-genome STAR index for genome mapping. default: genome/STARIndex/
	-M max allowed multiple mapped reads for STAR map. --default: 100000
	-m max mismatch allowed for STAR map. You can also set a float value, which will use ratio of read length for mismatch allowed. --default: 0.02 (2 mismatch per 100 read length)
    signal generating and visualization:
	-C chrom.size file for bigWig file generate. default: genome/genome.chrom.size
	-L library type [reverse|yes|no|miss], see htseq-count help file for more information; you can set to miss if you are not sure. --default: reverse
	--annotation-bed12 annotation file in bed12 format for guessing library type, used with -L miss. default: genome.genome.gene.bed12
	--no-duplication-removing don't remove duplicates. --default: removed
EOF
echo -e "\033[35;1m"
cat << EOF
    htseq readCounts calcultating:
	-H gtf file for htseq-count, htseq will use id for feature name; set to 0 if do not calculate feature signal; if have several gtf for htseq count, use like this: "a.gtf b.gtf c.gtf". default: genome/genome.gene+picluster+rmsk.gtf
	-S length of each feature in gtf for rpkm calculation. Please use and be in consistence with -H
	-i attribute for htseq feature id. --default: gene_id
	--nonunique [none|all] whether to score reads that are not uniquely aligned or ambiguously assigned to features for htseq. default: all
	--htseq-mode [union|intersection-strict|intersection-nonempty] mode for htseq, see htseq-count document for more detail. default: intersection-nonempty
EOF
echo -e "\033[34;1m"
cat << EOF
     transposon analysis:
	--transposon-analysis do transposon analysis by mapping reads to transposon consensus sequence directly, use with --index-transposon. default: do not analysis transposon expression
	--index-transposon index for transposon mapping. default: genome/Hisat2Index/transposon
	--size-transposon transposon size file like chromosome size file. default: genome/genome.transposon.size
     performance:
	-c CPU used. --default: 8
EOF
echo -e "\033[0m"
}


if [ $# -lt 1 ];then
	help_info
	exit 1
fi

PATH_PROG=`dirname $0` && PATH_ANNO=${PATH_PROG%/bin}/annotation
CPU=8
OUTPATH=./
LIBRARY=reverse
MAPNUM=100000
MISMATCH=0.02
ATTRIBUTE=gene_id
NONUNIQUE=all
HTSEQ_MODE=intersection-nonempty

echo0 1 "Command:"
COMMAND="BB_rnaseq_pipeline "$*
echo0 3 "$COMMAND"
echo ""

ARGS=`getopt -a -o l:r:g:p:o:M:m:C:c:L:i:H:t:S: -l no-rRNA-removing,index-rRNA:,index-genome:,no-duplication-removing,nonunique:,htseq-mode:,transposon-analysis,index-transposon:,size-transposon:,annotation-bed12:,no-deseq2 -- "$@"`
[ $? -ne 0 ] && usage
eval set -- "${ARGS}"
while true
do
	case "$1" in
		-h)	help_info && exit 0;;
		-v)	echo0 1 "BB_rnaseq_pipeline"${VERSION} && exit 0;;
		-l)	LEFT=($2) && shift 2;;
		-r)	RIGHT=($2) && shift 2;;
		-g)	GENOME=$2 && shift 2;;
		-t)	SAMPLE_INFO=$2 && shift 2;;
		-p)	PREFIX=($2) && shift 2;;
		-o)	OUTPATH=$2 && shift 2;;
		-M)	MAPNUM=$2 && shift 2;;
		-m)	MISMATCH=$2 && shift 2;;
		-C)	CHROMSIZE=$2 && shift 2;;
		-c)	CPU=$2 && shift 2;;
		-L)	LIBRARY=$2 && shift 2;;
		-i)	ATTRIBUTE=$2 && shift 2;;
		-H)	HTSEQ=$2 && shift 2;;
		-S)	ALL_SIZE=$2 && shift 2;;
		--no-deseq2)	IF_NOT_DESEQ2=1 && shift;;
		--no-rRNA-removing)	IF_NOT_RRNA=1 && shift;;
		--index-rRNA)	INDEX_RRNA=$2 && shift 2;;
		--index-genome)	INDEX_STAR=$2 && shift 2;;
		--no-duplication-removing)	IF_NOT_RMDUP=1 && shift;;
		--nonunique)	NONUNIQUE=$2 && shift 2;;
		--htseq-mode)	HTSEQ_MODE=$2 && shift 2;;
		--transposon-analysis)	IF_TRANSPOSON=1 && shift;;
		--index-transposon)	INDEX_TRANSPOSON=$2 && shift 2;;
		--size-transposon)	SIZE_TRANSPOSON=$2 && shift 2;;
		--annotation-bed12)	ANNOTATION_BED12=$2 && shift 2;;
		--)	shift && break;;
		*)	help_info && exit 1;;
	esac
done

######Configure Tools########
function checkTools(){
	if [ `which $1` ];then
		echo0 3 `which $1`
	else
		echo0 0 $1" not found, please install it or add it into your PATH!"
		exit 1
	fi
}

echo0 1 "tools used:"
checkTools STAR
checkTools bowtie2
checkTools samtools
checkTools bedtools
checkTools bedGraphToBigWig
checkTools htseq-count
checkTools ParaFly
checkTools R
if [ ${LIBRARY} == "miss" ];then
	checkTools infer_experiment.py
fi

######Configure Parameters########
echo0 1 "configuring parameters......"
[ -z ${LEFT} ] && echo0 0 "Error: Please input left.fq via -l" && exit 1

for i in ${LEFT[*]}
do
	[ ! -f "${i}" ] && echo0 0 "Error: No fastq file in ${i}" && exit 1
done

if [ ${#LEFT[*]} -gt 1 ];then # check if -l -r -p are the same length
	[ ! -z ${RIGHT} ] && [ ! ${#RIGHT[*]} -eq ${#LEFT[*]} ] && echo0 0 "Error: Multiple sample mode enabled, but the number of left fastq file is not equal to right fastq file" && exit 1
	[ ! -z ${PREFIX} ] && [ ! ${#PREFIX[*]} -eq ${#LEFT[*]} ] && echo0 0 "Error: Multiple sample mode enabled, but the number of left fastq file is not equal to prefix number" && exit 1
fi

if [ -z ${PREFIX} ];then
	NUM=0
	if [ -z ${RIGHT} ];then
		for i in ${LEFT[*]}
		do
			PREFIX[$NUM]=`basename ${i%.f*q*}`
			NUM=$(($NUM + 1))
		done
	else
		for i in ${LEFT[*]}
		do
			PREFIX[$NUM]=`basename ${i%[._]1.f*q*}`
			NUM=$(($NUM + 1))
		done
	fi
	echo0 4 "WARNING: no PREFIX name. set "${PREFIX[*]}" as PREFIX name"
fi

if [ ! -n "$GENOME" ];then
	echo0 0 "Error: please use -g to specify genome used"
	exit 1
fi

ALL_SIZE=${PATH_ANNO}/${GENOME}/${GENOME}.gene+picluster+rmsk.size

if [ ! -d "$OUTPATH" ];then
	echo0 4 "WARNING: output path not found, create one"
	mkdir -p ${OUTPATH}
fi

if [ -z $INDEX_STAR ];then
	INDEX_STAR=${PATH_ANNO}/${GENOME}/STARIndex/
fi

if [ -z $INDEX_RRNA ];then
	INDEX_RRNA=${PATH_ANNO}/${GENOME}/Bowtie2Index/rRNA
fi

if [ -z $INDEX_TRANSPOSON ];then
	INDEX_TRANSPOSON=${PATH_ANNO}/${GENOME}/Hisat2Index/transposon
fi

if [ -z $CHROMSIZE ];then
	CHROMSIZE=${PATH_ANNO}/${GENOME}/${GENOME}.chrom.size
fi
if [ ! -f ${CHROMSIZE} ];then
	echo0 0 "Error: no genome chrom.size data in "${CHROMSIZE}", please download via fetchChromSize"
	exit 1
fi

if [ -z ${SIZE_TRANSPOSON} ];then
	SIZE_TRANSPOSON=${PATH_ANNO}/${GENOME}/${GENOME}.transposon.size
fi

if [ ! -f ${SIZE_TRANSPOSON} ];then
	echo0 0 "Error: no repbase chrom.size data in "${SIZE_TRANSPOSON}", please download via fetchChromSize"
	exit 1
fi

if [ "$LIBRARY" = "miss" ];then
	if [ ! -n "${ANNOTATION_BED12}" ];then
		ANNOTATION_BED12=${PATH_ANNO}/${GENOME}/${GENOME}.gene.bed12
	fi
	if [ ! -f ${ANNOTATION_BED12} ];then
		echo0 0 "Error: library type set to miss but no annotation file in "${ANNOTATION_BED12}
		exit 1
	else
		NF=`head -1 ${ANNOTATION_BED12} | awk 'BEGIN{FS="\t"} {print NF}'`
		if [ "$NF" != "12" ]; then
			echo0 0 "Error: annotation file is not bed12 file"
			exit 1
		fi
	fi
fi

[ -z ${HTSEQ} ] && HTSEQ=${PATH_ANNO}/${GENOME}/${GENOME}.gene+picluster.gtf && HTSEQ1=${PATH_ANNO}/${GENOME}/${GENOME}.rmsk.gtf && RMSK=${PATH_ANNO}/${GENOME}/${GENOME}.rmsk.bed 
if [ "$HTSEQ" != "0" ];then
	if [ ! -f ${TEMP_HTSEQ} ]; then
		echo0 0 "Error: no gtf file in "${TEMP_HTSEQ} && exit 1
	fi
fi

if [ "${LEFT% *}" != "${LEFT}" ];then
	[ -z ${SAMPLE_INFO} ] && echo0 0 "Error: Please use multiple sample mode with -t" && exit 1
	[ -f ${SAMPLE_INFO}] && echo0 0 "Error: No sample_information file found in ${SAMPLE_INFO}" && exit 1
fi

######Configure Mode########
echo0 1 "mode and switchs:"
if [ -z $RIGHT ];then
	echo0 3 "paired-end or single-end: single-end"
else
	echo0 3 "paired-end or single-end: paired-end"
fi

if [ -z ${IF_NOT_RRNA} ];then
	echo0 3 "remove rRNA: yes"
else
	echo0 3 "remove rRNA: no"
fi

if [ -z ${IF_NOT_RMDUP} ];then
	echo0 3 "remove duplicates: yes"
else
	echo0 3 "remove duplicates: no"
fi

if [ "$HTSEQ" = "0" ];then
	echo0 3 "calculate signal for features: no"
else
	echo0 3 "calculate signal for features: ${HTSEQ}"
fi

if [ ! -z ${IF_TRANSPOSON} ];then
	echo0 3 "analyze transposons: yes"
else
	echo0 3 "analyze transposons: no"
fi

if [ ${#LEFT[*]} -gt 1 ];then
	echo0 3 "multiple sample mode: yes"
else
	echo0 3 "multiple sample mode: no"
fi


###########
# process #
###########


###############
# Preparation #
###############

###make paraFly files
PARA_BAMTOBED=para.${RANDOM}.${RANDOM}.${RANDOM}.bamtobed
PARA_GETFACTOR=para.${RANDOM}.${RANDOM}.${RANDOM}.getfactor
PARA_BEDTOBW=para.${RANDOM}.${RANDOM}.${RANDOM}.bedtobw
PARA_HTSEQ=para.${RANDOM}.${RANDOM}.${RANDOM}.htseq
PARA_HTSEQ1=para.${RANDOM}.${RANDOM}.${RANDOM}.htseq1
PARA_MKRPKM=para.${RANDOM}.${RANDOM}.${RANDOM}.mkrpkm
PARA_MAP_TRN=para.${RANDOM}.${RANDOM}.${RANDOM}.maptrn
PARA_BAMTOBED=para.${RANDOM}.${RANDOM}.${RANDOM}.bamtobed

###make directories
[ ! -d ${OUTPATH}/log_file ] && mkdir ${OUTPATH}/log_file
[ ! -d ${OUTPATH}/bowtie2 ] && mkdir ${OUTPATH}/bowtie2
[ ! -d ${OUTPATH}/hisat2 ] && mkdir ${OUTPATH}/hisat2
[ ! -d ${OUTPATH}/STAR ] && mkdir ${OUTPATH}/STAR
[ ! -d ${OUTPATH}/signal ] && mkdir ${OUTPATH}/signal
[ ! -d ${OUTPATH}/replicates_quality ] && mkdir ${OUTPATH}/replicates_quality
[ ! -d ${OUTPATH}/bigWig ] && mkdir ${OUTPATH}/bigWig
[ ! -d ${OUTPATH}/comparison ] && mkdir ${OUTPATH}/comparison
[ ! -d ${OUTPATH}/bucket ] && mkdir ${OUTPATH}/bucket

###check index
echo0 1 "check indexes:"
GENOME_FA=${PATH_ANNO}/${GENOME}/${GENOME}.fa
if [ -f $INDEX_STAR"chrLength.txt" -a -f $INDEX_STAR"chrNameLength.txt" -a -f $INDEX_STAR"chrName.txt" -a -f $INDEX_STAR"chrStart.txt" -a -f $INDEX_STAR"Genome" -a -f $INDEX_STAR"genomeParameters.txt" -a -f $INDEX_STAR"SA" -a -f $INDEX_STAR"SAindex" ];then
	echo0 3 "genome Index: "$INDEX_STAR
else
	echo0 0 "Error: no STAR index in "${INDEX_STAR}", please build with STAR --runMode genomeGenerate"
	exit 1
fi

if [ -z ${IF_NOT_RRNA} ];then
	if [ -f $INDEX_RRNA".1.bt2" -a -f $INDEX_RRNA".2.bt2" -a -f $INDEX_RRNA".3.bt2" -a -f $INDEX_RRNA".4.bt2" -a -f $INDEX_RRNA".rev.1.bt2" -a -f $INDEX_RRNA".rev.2.bt2" ];then
		echo0 3 "rRNA Index: "$INDEX_RRNA
	else
		echo0 0 "Error: no bowtie2 index in"${INDEX_RRNA}", please build with bowtie2-build"
		exit 1
	fi
fi

if [ ! -z ${IF_TRANSPOSON} ];then
	if [ -f $INDEX_TRANSPOSON".1.ht2" -a -f $INDEX_TRANSPOSON".2.ht2" -a -f $INDEX_TRANSPOSON".3.ht2" -a -f $INDEX_TRANSPOSON".4.ht2" -a -f $INDEX_TRANSPOSON".5.ht2" -a -f $INDEX_TRANSPOSON".6.ht2" -a -f $INDEX_TRANSPOSON".7.ht2" -a -f $INDEX_TRANSPOSON".8.ht2" ];then
		echo0 3 "transposon Index: "$INDEX_TRANSPOSON
	else
		echo0 0 "Error: no bowtie2 index in "${INDEX_TRANSPOSON}", please build with bowtie2-build"
		exit 1
	fi
fi

### check STAR mismatch
if [ ${MISMATCH} -ge 0 ] 2>/dev/null;then
	MIS_PARAMETER="--outFilterMismatchNmax ${MISMATCH}"
else
	MIS_PARAMETER="--outFilterMismatchNoverReadLmax ${MISMATCH}"
fi

####################################################
###align to rRNA and genome with bowtie2 and STAR###
####################################################


SAMPLE_INDEX=0
for TEMP_LEFT in ${LEFT[*]}
do
	echo0 4 "------ analysis ${PREFIX[${SAMPLE_INDEX}]} ------"
	##########################################################
	###alignment sort, visualization and signal calculation###
	##########################################################
	###samtools
	echo0 2 "---sam to indexed bam via samtools......" # now use STAR to directly get sorted.bam
	#mv ${OUTPATH}/STAR/${PREFIX[${SAMPLE_INDEX}]}Aligned.sortedByCoord.out.bam ${OUTPATH}/STAR/${PREFIX[${SAMPLE_INDEX}]}.sort.bam
	###make bed12 file for all mapped reads with strand information and mapped times for per reads in 5th column
	echo0 2 "---bam to bed via bedtools......"
	###confirm the normalize factor for density
	#NUM_UNIQ_READ=`grep "Uniquely mapped reads number" STAR/${PREFIX[${SAMPLE_INDEX}]}Log.final.out | awk 'BEGIN{FS="\t"} {print $2}'`
	FACTOR=`cat ${OUTPATH}/STAR/${PREFIX[${SAMPLE_INDEX}]}.factor`
	echo0 3 "---normalized to unique mapped reads per million, factor = ${FACTOR}"
	
	###make bigWig and normalize
	echo0 2 "---make signal files......"
	###htseq-count
	if [ "$HTSEQ" != "0" ];then
		echo0 2 "---signal calculation via htseq for"${HTSEQ}"......"
		if [ ! -z ${HTSEQ1} ];then
			echo -e "awk -v factor=${FACTOR} 'BEGIN{FS=OFS=\"\\\t\"} {if(NR==FNR){a[\$1]=\$2}else{print \$1,a[\$1]*1000/\$2*factor}}' ${OUTPATH}/signal/${PREFIX[${SAMPLE_INDEX}]}.sig ${ALL_SIZE} > ${OUTPATH}/signal/${PREFIX[${SAMPLE_INDEX}]}.rpkm && awk -v factor=${FACTOR} 'BEGIN{FS=OFS=\"\\\t\"} {if(NR==FNR){a[\$1]=\$2}else{print \$1,a[\$1]}}' ${OUTPATH}/signal/${PREFIX[${SAMPLE_INDEX}]}.sig ${ALL_SIZE} > ${OUTPATH}/signal/${PREFIX[${SAMPLE_INDEX}]}.readCount && rm ${OUTPATH}/signal/${PREFIX[${SAMPLE_INDEX}]}.sig" >> ${PARA_HTSEQ1}
		else
			echo -e "awk -v factor=${FACTOR} 'BEGIN{FS=OFS=\"\\\t\"} {if(NR==FNR){a[\$1]=\$2}else{print \$1,a[\$1]*1000/\$2*factor}}' ${OUTPATH}/signal/${PREFIX[${SAMPLE_INDEX}]}.sig ${ALL_SIZE} > ${OUTPATH}/signal/${PREFIX[${SAMPLE_INDEX}]}.rpkm && awk -v factor=${FACTOR} 'BEGIN{FS=OFS=\"\\\t\"} {if(NR==FNR){a[\$1]=\$2}else{print \$1,a[\$1]}}' ${OUTPATH}/signal/${PREFIX[${SAMPLE_INDEX}]}.sig ${ALL_SIZE} > ${OUTPATH}/signal/${PREFIX[${SAMPLE_INDEX}]}.readCount && rm ${OUTPATH}/signal/${PREFIX[${SAMPLE_INDEX}]}.sig" >> ${PARA_HTSEQ1}
		fi
	fi
	#########################
	###transposon analysis###
	#########################
	SAMPLE_INDEX=$((${SAMPLE_INDEX} + 1))
done
# run pooled bedTobw
echo0 2 "run pooled bed to bigWig commands......"
echo0 2 "run pooled htseq commands......"
ParaFly -c ${PARA_HTSEQ1} -CPU ${CPU} -failed_cmds ${PARA_HTSEQ1}.failed_cmds 2>/dev/null && rm ${PARA_HTSEQ1}*

###finished
echo0 4 "------finished🍺🍺🍺------"
