#!/bin/bash

# function
function checkTools(){
	if [ `which $1` ];then
		echo0 3 "$1: `which $1`"
	else
		echo0 0 "$1 not found, please install it or add it into your PATH!"
		exit 1
	fi
}

# help information
help_info(){
	echo0 5 "$0"
	echo0 5 "\t-l <file>\tleft reads of ChIPseq"
	echo0 5 "\t-r <file>\tright reads of ChIPseq. not set if it is single-end sequencing"
	echo0 5 "\t-g <genome>\tgenome used."
	echo0 0 "picluster and TE analysis:"
	echo0 0 "\t-P \t\tset -P to enable get normalized signal across piclusters. default: not set"
	echo0 0 "\t-T \t\tset -T to enable get normalized signal across TEs. default: not set"
	echo0 4 "mapping:"
	echo0 4 "\t-M <bowtie2|bwa_mem|bwa_aln>\tengine used for mapping. default: bowtie2"
	echo0 4 "\t-X <int>\tmax fragment length for pair-end data. default: 700"
	echo0 4 "\t-R \t\tset -R to remove duplicate reads via samtools rmdup. default: not set"
	echo0 1 "output:"
	echo0 4 "\t-o <dir>\toutput directory. default: ./chipseq_pipeline"
	echo0 4 "\t-p <string\toutput prefix name. default: sample name"
	echo0 6 "other optional:"
	echo0 6 "\t-i <index>\tbowtie2 index for mapping. default: genome/Bowtie2Index/genome"
	echo0 6 "\t-C <file>\tchrom.size file. default: genome/genome.chrom.size"
	echo0 6 "\t-c <int>\tCPU number used. default: 1"
}

if [ $# -lt 1 ];then
	help_info && exit 1
fi

# parameters
PATH_PROG=`dirname $0` && PATH_ANNO=${PATH_PROG%/bin}/annotation
CPU=1
OUTDIR=./chipseq_pipeline
MAX_FRAGMENT=700
MAP_ENGINE=bowtie2

while getopts "hl:r:g:i:C:ao:p:c:X:PTRM:" OPTION; do
	case $OPTION in
		h)	help_info && exit 1;;
		l)	LEFT=`readlink -f ${OPTARG}`;;
		r)	RIGHT=`readlink -f ${OPTARG}`;;
		g)	GENOME=${OPTARG};;
		i)	INDEX=`readlink -f ${OPTARG}`;;
		C)	CHROMSIZE=`readlink -f ${OPTARG}`;;
		a)	REPORT="-a";;
		o)	OUTDIR=${OPTARG};;
		p)	PREFIX=${OPTARG};;
		X)	MAX_FRAGMENT=${OPTARG};;
		P)	IF_PIC=1;;
		T)	IF_TE=1;;
		c)	CPU=${OPTARG};;
		R)	IF_RMDUP=1;;
		M)	MAP_ENGINE=${OPTARG};;
		*)	help_info && exit 1
	esac
done

# check parameters
echo0 1 "check parameters......"
[ -z ${LEFT} ] && echo0 0 "please provide left.fastq file via -l" && exit 1
[ -z ${RIGHT} ] && echo0 4 "right file not provide, use signle-end mode"
[ -z ${GENOME} ] && echo0 0 "please provideg genome via -g" && exit 1
[ ! -f ${LEFT} ] && echo0 0 "no file found in ${LEFT}" && exit 1
[ ! -z ${RIGHT} ] && [ ! -f ${RIGHT} ] && echo0 0 "no file found in ${RIGHT}" && exit 1
if [ -z ${INDEX} ];then
	if [ "${MAP_ENGINE}" == "bowtie2" ];then
		INDEX=${PATH_ANNO}/${GENOME}/Bowtie2Index/genome
	else
		INDEX=${PATH_ANNO}/${GENOME}/BWAIndex/genome
	fi
fi
[ -z ${CHROMSIZE} ] && CHROMSIZE=${PATH_ANNO}/${GENOME}/${GENOME}.chrom.size
! [ -f ${INDEX}.1.bt2 -o -f ${INDEX}.amb ] && echo0 0 "no index found for ${INDEX}" && exit 1
! [ "${CPU}" -gt 0 ] 2>/dev/null && echo0 0 "threads need to be integer bigger than 0"
! [ "${MAX_FRAGMENT}" -gt 10 ] 2>/dev/null && echo0 0 "max fragment need to be integer bigger than 10"
if [ -z ${PREFIX} ];then
	if [ -z ${RIGHT} ];then
		PREFIX=`basename ${LEFT}` && PREFIX=${PREFIX%.f*q}
	else
		PREFIX=`basename ${LEFT}` && PREFIX=${PREFIX%[._]1.f*q}
	fi
fi
! [ "${MAP_ENGINE}" == "bowtie2" -o "${MAP_ENGINE}" == "bwa_mem" -o "${MAP_ENGINE}" == "bwa_aln" ] && echo0 0 "-M must be one of bowtie2, bwa_mem or bwa_aln" && exit 1
echo0 1 "OK"

# check dependencies
echo0 1 "check dependencies......"
checkTools bowtie2
checkTools bwa
checkTools samtools
checkTools fastqc
checkTools bedtools
checkTools bedGraphToBigWig
echo0 1 "OK"

###########
# process #
###########

# mkdir
[ ! -d ${OUTDIR} ] && mkdir -p ${OUTDIR}
[ ! -d ${OUTDIR}/bowtie2 ] && mkdir -p ${OUTDIR}/bowtie2
[ ! -d ${OUTDIR}/log ] && mkdir -p ${OUTDIR}/log
[ ! -d ${OUTDIR}/fastQC ] && mkdir -p ${OUTDIR}/fastQC
[ ! -d ${OUTDIR}/macs2 ] && mkdir -p ${OUTDIR}/macs2
[ ! -d ${OUTDIR}/bigWig ] && mkdir -p ${OUTDIR}/bigWig
[ ! -d ${OUTDIR}/signal ] && mkdir -p ${OUTDIR}/signal

# mapping via bowtie2|bwa mem|bwa aln
BAM=${OUTDIR}/bowtie2/${PREFIX}.sort.bam 
samtools flagstat ${BAM} > ${OUTDIR}/bowtie2/${PREFIX}.flagstat
FACTOR=`awk 'BEGIN{FS=" "} {if($0~/mapped \(/){print $1/1000000}}' ${OUTDIR}/bowtie2/${PREFIX}.flagstat`
echo0 3 "factor used for normalization: ${FACTOR}"
echo -e "${FACTOR}" > ${OUTDIR}/bowtie2/${PREFIX}.factor
		
# bam to bed and then to bigWig
echo0 2 "bam to uniqMapped bigWig"
if [ -z ${RIGHT} ];then
	bedtools bamtobed -i ${BAM} > ${OUTDIR}/bowtie2/${PREFIX}.bed
else
	samtools sort -@ ${CPU} -n -o ${OUTDIR}/bowtie2/${PREFIX}.sortByName.bam ${OUTDIR}/bowtie2/${PREFIX}.sort.bam >/dev/null 2>&1 || (echo0 0 "samtools sort error" && exit 1)
	bedtools bamtobed -bedpe -i ${OUTDIR}/bowtie2/${PREFIX}.sortByName.bam | \
		awk 'BEGIN{FS=OFS="\t"} {print $1,$2,$6,$7,$8,"+"}' \
		> ${OUTDIR}/bowtie2/${PREFIX}.bed
fi
if [ "${MAP_ENGINE}" == "bowtie2" ];then
	awk '$5>5' ${OUTDIR}/bowtie2/${PREFIX}.bed > ${OUTDIR}/bowtie2/${PREFIX}.uniq.bed # separate uniqMappers
else
	samtools view -h ${BAM} | egrep "^@|XT:A:U" | samtools view -bhS - > ${BAM}.temp.bam 2>/dev/null
	if [ -z ${RIGHT} ];then
		bedtools bamtobed -i ${BAM}.temp.bam > ${OUTDIR}/bowtie2/${PREFIX}.uniq.bed 2>/dev/null
	else
		samtools sort -@ ${CPU} -n -o ${BAM}.temp2.bam ${BAM}.temp.bam > /dev/null 2>&1 || (echo0 0 "samtools sort error" && exit 1)
		bedtools bamtobed -bedpe -i ${BAM}.temp2.bam | \
			awk 'BEGIN{FS=OFS="\t"} {print $1,$2,$6,$7,$8,"+"}' \
			> ${OUTDIR}/bowtie2/${PREFIX}.uniq.bed
		rm ${BAM}.temp2.bam
	fi
	rm ${BAM}.temp.bam
fi

if [ "${MAP_ENGINE}" != "bowtie2" ];then # remove unmapped reads if engine is not bowtie2
	awk '$1!="." && $3-$2>0 && $3-$2<700' ${OUTDIR}/bowtie2/${PREFIX}.uniq.bed > ${PREFIX}.temp && mv ${PREFIX}.temp ${OUTDIR}/bowtie2/${PREFIX}.uniq.bed
	awk '$1!="." && $3-$2>0 && $3-$2<700' ${OUTDIR}/bowtie2/${PREFIX}.bed > ${PREFIX}.temp && mv ${PREFIX}.temp ${OUTDIR}/bowtie2/${PREFIX}.bed
fi

bedtools genomecov -scale ${FACTOR} -bg -i ${OUTDIR}/bowtie2/${PREFIX}.uniq.bed -g ${CHROMSIZE} | sort -k1,1 -k2,2n > ${OUTDIR}/bowtie2/${PREFIX}.uniq.bdg 
bedtools genomecov -scale ${FACTOR} -bg -i ${OUTDIR}/bowtie2/${PREFIX}.bed -g ${CHROMSIZE} | sort -k1,1 -k2,2n > ${OUTDIR}/bowtie2/${PREFIX}.all.bdg 
bedGraphToBigWig ${OUTDIR}/bowtie2/${PREFIX}.uniq.bdg ${CHROMSIZE} ${OUTDIR}/bigWig/${PREFIX}.rpm.uniq.bw 
bedGraphToBigWig ${OUTDIR}/bowtie2/${PREFIX}.all.bdg ${CHROMSIZE} ${OUTDIR}/bigWig/${PREFIX}.rpm.all.bw 
rm ${OUTDIR}/bowtie2/${PREFIX}.uniq.bdg ${OUTDIR}/bowtie2/${PREFIX}.all.bdg 

# get allMapper signal for TEs
if [ ! -z ${IF_TE} ];then
	echo0 2 "get allMapper signal for TEs......"
	bedtools intersect -nonamecheck -c -a ${PATH_ANNO}/${GENOME}/${GENOME}.rmsk.bed9 -b ${OUTDIR}/bowtie2/${PREFIX}.bed -F 0.5 | cut -f 4,10 | awk -v factor=${FACTOR} 'BEGIN{FS=OFS="\t"} {if(NR==FNR){a[$1]+=$2}else{print $1,a[$1]/factor}}' - ${PATH_ANNO}/${GENOME}/${GENOME}.transposon.size > ${OUTDIR}/signal/${PREFIX}.TE.allMappers.rpm
	awk 'BEGIN{FS=OFS="\t"} {if(NR==FNR){a[$1]=$2}else{if(a[$1]){print $1,$2*1000/a[$1]}else{print $1,0}}}' ${PATH_ANNO}/${GENOME}/${GENOME}.transposon.size ${OUTDIR}/signal/${PREFIX}.TE.allMappers.rpm > ${OUTDIR}/signal/${PREFIX}.TE.allMappers.rpkm
fi

# get uniqMapper signal for piclusters
if [ ! -z ${IF_TE} ];then
	echo0 2 "get uniqMapper signal for piclusters......"
	bedtools intersect -nonamecheck -c -a ${PATH_ANNO}/${GENOME}/${GENOME}.picluster.bed -b ${OUTDIR}/bowtie2/${PREFIX}.uniq.bed -F 0.5 | cut -f 4,7 | awk -v factor=${FACTOR} 'BEGIN{FS=OFS="\t"} {print $1,$2/factor}' > ${OUTDIR}/signal/${PREFIX}.piC.uniqMappers.rpm
	bedtools intersect -nonamecheck -c -a ${PATH_ANNO}/${GENOME}/${GENOME}.picluster.bed -b ${OUTDIR}/bowtie2/${PREFIX}.bed -F 0.5 | cut -f 4,7 | awk -v factor=${FACTOR} 'BEGIN{FS=OFS="\t"} {print $1,$2/factor}' > ${OUTDIR}/signal/${PREFIX}.piC.allMappers.rpm
	awk 'BEGIN{FS=OFS="\t"} {if(NR==FNR){a[$4]+=($3-$2)}else{print $1,$2*1000/a[$1]}}' ${PATH_ANNO}/${GENOME}/${GENOME}.picluster.bed ${OUTDIR}/signal/${PREFIX}.piC.uniqMappers.rpm > ${OUTDIR}/signal/${PREFIX}.piC.uniqMappers.rpkm
	awk 'BEGIN{FS=OFS="\t"} {if(NR==FNR){a[$4]+=($3-$2)}else{print $1,$2*1000/a[$1]}}' ${PATH_ANNO}/${GENOME}/${GENOME}.picluster.bed ${OUTDIR}/signal/${PREFIX}.piC.allMappers.rpm > ${OUTDIR}/signal/${PREFIX}.piC.allMappers.rpkm
fi

# remove mediate files
rm ${OUTDIR}/bowtie2/${PREFIX}.sam ${OUTDIR}/bowtie2/${PREFIX}.bam 
TIME=${SECONDS}

echo0 4 "------ finished!üç∫üç∫üç∫ ------"
echo0 3 "Time used:\t$((${TIME} / 3600))h $((${TIME} / 60))m"
